args "--include-getopt --show-required --unamed-opts=FILE --no-handle-error --conf-parser"

description "About Wendy:"
purpose "Wendy is a tool to synthesize partners for services."


section "Analysis Task"
sectiondesc="Wendy is able to handle two different analysis tasks. It generates the operating guidelines (or partners in general) with respect to (1) deadlock freedom or (2) livelock freedom. By default, Wendy will consider deadlock freedom.\n"

option "lf" -
  "Livelock freedom."
  details="The operating guidelines and reduced partners are generated with respect to livelock freedom. This means, that the composition of the currently analyzed service and the generated partner(s) do not run into a livelock from which no final marking is reachable anymore.\n"
  flag off


section "Input/Output"
sectiondesc="When called without an input file, Wendy reads from the standard input stream. When called without an output parameter, Wendy does not create an output file, but exits after building the operating guidelines. If no filename is given for one of the options below, the input filename's suffix (`.owfn') is replaced by the name of the respective option (e.g., `.og'). If the filename `-' is given, Wendy will pipe the respective output to the standard output stream.\n"

option "og" -
  "Operating guidelines output."
  string
  typestr="FILENAME"
  argoptional
  optional

option "fionaFormat" -
  "Use the deprecated Fiona OG file format (does not work with `--sa')."
  dependon="og"
  flag off
  hidden

option "sa" -
  "Service automaton output."
  string
  typestr="FILENAME"
  argoptional
  optional

option "dot" -
  "Graphviz dot output."
  string
  typestr="FILENAME"
  argoptional
  optional

option "im" -
  "Instance migration information output. This option is used when Mia calls Wendy."
  string
  typestr="FILENAME"
  argoptional
  optional
  hidden

option "mi" -
  "Prints a mapping from marking identifiers to actual Petri net markings."
  string
  typestr="FILENAME"
  argoptional
  optional

option "cover" -
  "Generate cover operating guidelines, reading a specification from a given file. If no file is given, all nodes will be covered."
  dependon="og"
  string
  typestr="FILENAME"
  argoptional
  optional


section "General Options"
sectiondesc="These options control the calculation of the operating guidelines as well as the style the operating guidelines are represented.\n"

option "messagebound" m
  "Set the message bound (i.e., the maximal number of messages per channel)."
  details="Values within the range of 1..255 are allowed.\n"
  int
  typestr="BOUND"
  default="1"
  optional

option "formula" -
  "Select the style of formula to be used in outputs."
  details="Choose between either standard formulae in conjunctive normal form (`cnf') or a compact 2-bit-representation (`2bits'). Note that the 2-bit-representation cannot be used if synchronous communication occurs in the input file.\n"
  values="cnf","2bits" enum
  typestr="STYLE"
  dependon="og"
  default="cnf"
  optional


section "Dot Options"
sectiondesc="These options control the graphical representation of the calculated operating guideline. It has no effect on other files.\n"

option "showEmptyNode" -
  "Show the empty node in Dot output."
  details="The empty node is a knowledge that is unreachable (hence empty), but plays an important role when matching a service with the operating guidelines or deciding substitutability. The empty node is always written to `.og' files, but is optional for `.dot' files.\n"
  dependon="dot"
  flag off

option "showWaitstates" -
  "Show waitstates in Dot output."
  details="A waitstate is a state that the net can only leave with an asynchronous receive event or a synchronous event. Waitstates help to understand how the CNF formulas are constructed.\n"
  dependon="dot"
  flag off

option "showTransients" -
  "Show transient states in Dot output."
  details="A transient state is a state that enables a transition.\n"
  dependon="dot"
  flag off


section "Optimizations"
sectiondesc="These options control the optimizations Wendy uses while synthesizing partners.\n"

option "smartSendingEvent" -
  "Send only if no marking within current knowledge is found that will definitely not consume the message sent."
  details="A sending event is only considered if from the inner markings contained within the current knowledge in case of (1) deadlock freedom, some (inner) marking is reachable; (2) livelock freedom, a final (inner) marking is reachable. This will lead to less insane nodes and thus increases speed and uses less memory. In case of deadlock freedom, partners which will send messages that will never be consumed get lost. In case of livelock freedom no partners will be lost.\n"
  flag off


section "Reductions"
sectiondesc="These options control the reductions Wendy uses while synthesizing partners. Note that reduction rules do not necessarily preserve all partners, but return a partner if one exists.\n"

option "waitstatesOnly" -
  "Only consider waitstates when calculating successors."
  details="This rule avoids asynchronous `sending in advance'. That is, only messages that might help to resolve a concrete waitstate are sent. Note this rule does not preserve all partners, but will return a partner if one exists.\n"
  flag off

option "receiveBeforeSend" -
  "Only send if receiving does not resolve all waitstates."
  details="This rule will consider exactly those sending events that are absolutely necessary. That is, using this rule will create `arrogant' partners which first try to receive as many messages as possible and only send messages if a waitstate cannot be resolved otherwise. Note this rule does not preserve all partners, but will return a partner if one exists.\n"
  flag off

option "seqReceivingEvents" -
  "Sequentialize receiving events."
  details="This rule determines which activated receiving events will actually be considered and thus might lessen the number of receiving events followed at a particular knowledge. It is ensured that the set of activated receiving events will resolve every waitstate. Note this rule does not preserve all partners, but will return a partner if one exists.\n"
  flag off

option "succeedingSendingEvent" -
  "One succeeding sending event is enough."
  details="If there exists one sending event such that the current knowledge is satisfied, no more (sending event) successor knowledges are calculated. Note this rule does not preserve all partners, but will return a partner if one exists.\n"
  hidden
  flag off

option "quitAsSoonAsPossible" -
  "Once all waitstates of a knowledge are resolved no more successor knowledges are calculated."
  details="Once all waitstates of a knowledge are resolved no more successor knowledges are calculated. Note this rule does not preserve all partners, but will return a partner if one exists.\n"
  hidden
  flag off


section "Debugging"
sectiondesc="These options control how much debug output Wendy creates. The more debug output is used, the slower Wendy runs.\n"

option "verbose" v
  "Show verbose information on the several intermediate steps"
  details="Note this option might slow down the execution.\n"
  flag off

option "diagnose" -
  "Insane nodes are not deleted."
  details="Insane nodes are not deleted and thus dot output shows insane nodes as well.\n"
  flag off

option "reportFrequency" -
  "Report frequency for knowledge bubbles."
  details="Note that small values might slow down the execution. To switch reporting off completely, set it to `0'.\n"
  int
  typestr="FREQ"
  default="10000"
  optional

option "bug" -
  "Write configuration information into a file `bug.log'."
  details="This output file gives information on the machine Wendy was configured and compiled which should help to fix bugs. The file `bug.log' should be attached to bug reports.\n"
  flag off
  hidden


section "Configuration"
sectiondesc="Wendy relies on several other tools. These options configure Wendy to find these tools.\n"

option "config" c
  "Read configuration from file."
  details="If no file is given, Wendy first tries to parse file `wendy.conf' from the sysconf directory (usually `/usr/local/etc'; written in case Wendy was installed) and then from the current working directory. If neither file was found, the standard values for `lola' are assumed."
  string
  typestr="FILE"
  optional

option "lola" -
  "The LoLA binary that is compiled with the option `STATESPACE' without reduction techniques. LoLA can be downloaded at http://service-technology.org/lola and compiled using `make lola-statespace'."
  string
  typestr="FILENAME"
  default="lola-statespace"
  optional
  hidden

option "tmpfile" -
  "The filename Wendy should use to create temporary files (i.e., the intermediate Petri net passed to LoLA). The filename should end with `XXXXXX' which is replaced at runtime with a random string."
  string
  typestr="FILENAME"
  default="/tmp/wendy-XXXXXX"
  optional
  hidden

option "clean" -
  "Any temporary files created by Wendy are deleted once they are not used any more."
  flag off


text "Report bugs to wendy@service-technology.org. Wendy's home page: http://service-technology.org/wendy"
