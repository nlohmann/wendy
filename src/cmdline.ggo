args "--include-getopt --show-required --unamed-opts=FILE --no-handle-error --conf-parser"

description "About Wendy:"
purpose "Wendy: synthesizing partners for services.\n\n  Report bugs to wendy@service-technology.org.\n  Visit Wendy's home page at http://service-technology.org/wendy"


section "Analysis Task"
sectiondesc="Wendy is able to handle two different analysis tasks. It synthesizes partners of a service with respect to (1) deadlock freedom or (2) livelock freedom. By default, Wendy will consider deadlock freedom.\n"

option "correctness" -
  "Correctness criterion."
  details="The partners are synthesized with respect to a correctness criterion. We distinguish between deadlock and livelock freedom. For deadlock freedom, the composition of the currently analyzed service and the synthesized partner must not deadlock; that is, a maximal run must end in a final state. Livelock freedom additionally demands that it is always possible to reach a final state.\n"
  values="deadlock","livelock" enum
  typestr="CRITERION"
  default="deadlock"
  optional

option "messagebound" m
  "Set the message bound."
  details="The message bound sets the maximal number of messages per channel. Values within the range of 1..255 are allowed.\n"
  int
  typestr="BOUND"
  default="1"
  optional

option "ignoreUnreceivedMessages" -
  "Also synthesize partners that send messages that might be left unreceived."
  details="If the correctness criterion is deadlock freedom, then the composition might reach a livelock in which a message is pending on a channel, but is never received.\n"
  flag off
  hidden


section "Input/Output"
sectiondesc="When called without an input file, Wendy reads from the standard input stream. When called without an output parameter, Wendy does not create an output file, but exits after synthesis. If no filename is given for one of the options below, the input filename's suffix (`.owfn') is replaced by the name of the respective option (e.g., `.og'). If the filename `-' is given, Wendy will pipe the respective output to the standard output stream.\n"

option "og" -
  "Operating guidelines output."
  string
  typestr="FILENAME"
  argoptional
  optional

option "sa" -
  "Service automaton output."
  string
  typestr="FILENAME"
  argoptional
  optional

option "dot" -
  "Creates a graphviz dot representation of the operating guidelines for the given correctness criterion."
  details="You can pipe directly into dot by calling `wendy net.owfn --dot=- | dot'\n"
  string
  typestr="FILENAME"
  argoptional
  optional

option "im" -
  "Instance migration information output."
  details="This option is used when Mia calls Wendy.\n"
  string
  typestr="FILENAME"
  argoptional
  optional
  hidden

option "mi" -
  "Marking information output."
  details="Prints a mapping from marking identifiers (e.g., `m3') to actual Petri net markings (e.g., `p5: 1, p6: 2')."
  string
  typestr="FILENAME"
  argoptional
  optional

option "pnml" -
  "Read open nets in PNML file format."
  details="Using this option, the input file is expected to be in a PNML file format that is slightly extended to specify the interface and final markings."
  flag off


section "Operating Guidelines Options"
sectiondesc="These options control the calculation of the operating guidelines as well as the style the operating guidelines are represented.\n"

option "cover" -
  "Cover operating guidelines output."
  details="Generate cover operating guidelines, reading a specification from a given file. If no file is given, all nodes will be covered."
  dependon="og"
  string
  typestr="FILENAME"
  argoptional
  optional


section "Dot Options"
sectiondesc="These options control the graphical representation of the calculated operating guideline. It has no effect on other files.\n"

option "showEmptyNode" -
  "Show the empty node."
  details="The empty node is a knowledge that is unreachable (hence empty), but plays an important role when matching a service with the operating guidelines or deciding substitutability. The empty node is always written to `.og' files, but is optional for `.dot' files.\n"
  dependon="dot"
  flag off

option "showWaitstates" -
  "Show waitstates."
  details="A waitstate is a state that the net can only leave with an asynchronous receive event or a synchronous event.\n"
  dependon="dot"
  flag off

option "showTransients" -
  "Show transient states."
  details="A transient state is a state that enables a transition.\n"
  dependon="dot"
  flag off


section "Reductions"
sectiondesc="These options control the reductions Wendy uses while synthesizing partners. Note that reduction rules do not necessarily preserve all partners, but return a partner if one exists.\n"

option "waitstatesOnly" -
  "Only consider waitstates when calculating successors."
  details="This rule avoids asynchronous `sending in advance'. That is, only messages that might help to resolve a certain waitstate are sent.\n"
  flag off

option "receivingBeforeSending" -
  "Only send if receiving does not resolve all waitstates."
  details="This rule will consider exactly those sending events that are absolutely necessary. That is, using this rule will create `arrogant' partners which first try to receive as many messages as possible and only send messages if a waitstate cannot be resolved otherwise.\n"
  flag off

option "seqReceivingEvents" -
  "Sequentialize receiving events."
  details="This rule determines which activated receiving events will actually be considered and thus might lessen the number of receiving events followed at a particular knowledge. It is ensured that the set of activated receiving events will resolve every waitstate.\n"
  flag off

option "succeedingSendingEvent" -
  "One succeeding sending event is enough."
  details="If there exists one sending event such that the current knowledge is satisfied, no more (sending event) successor knowledges are calculated.\n"
  flag off

option "quitAsSoonAsPossible" -
  "Once all waitstates of a knowledge are resolved, no more successor knowledges are calculated."
  details="Once all waitstates of a knowledge are resolved no more successor knowledges are calculated.\n"
  flag off


section "Debugging"
sectiondesc="These options control how much debug output Wendy creates.\n"

option "verbose" v
  "Show verbose messages."
  details="Show verbose information reporting intermediate steps.\n"
  flag off

option "diagnose" -
  "Create a Dot file with diagnosis information."
  details="Creates a Dot file with diagnosis information which should help to understand the reasons why a net is uncontrollable.\n"
  string
  typestr="FILENAME"
  argoptional
  optional

option "reportFrequency" -
  "Report frequency for knowledge bubbles."
  details="Note that small values might slow down the execution. To switch reporting off completely, set it to `0'.\n"
  int
  typestr="FREQ"
  default="100000"
  optional

option "bug" -
  "Write configuration information into a file `bug.log'."
  details="This output file gives information on the machine Wendy was configured and compiled which should help to fix bugs. The file `bug.log' should be attached to bug reports.\n"
  flag off
  hidden

option "finalize" -
  "Release all allocated memory."
  details="This option calls the destructors of all objects that have been created by Wendy. This is usually not necessary, because the operating system cleans up once Wendy terminates. However, this option can be used to detect memory leaks.\n"
  flag off
  hidden

option "stats" -
  "Display time and memory consumption on termination."
  details="The time is measured using the function clock(3). The memory usage is measured using the ps(1) command. Note that memory consumption contains a small overhead.\n"
  flag off
  hidden


section "Configuration"
sectiondesc="Wendy relies on several other tools. These options configure Wendy to find these tools.\n"

option "config" c
  "Read configuration from file."
  details="If no file is given, Wendy first tries to parse file `wendy.conf' from the sysconf directory (usually `/usr/local/etc'; written in case Wendy was installed) and then from the current working directory. If neither file was found, the standard values for `lola' are assumed.\n"
  string
  typestr="FILE"
  optional

option "lola" -
  "Set the path and binary of LoLA."
  details="The LoLA binary that is compiled with the option `STATESPACE' without reduction techniques. LoLA can be downloaded at http://service-technology.org/lola and compiled using `make lola-statespace'.\n"
  string
  typestr="FILENAME"
  default="lola-statespace"
  optional
  hidden

option "tmpfile" -
  "Set the path and name of temporary files"
  details="The filename Wendy should use to create temporary files (i.e., the intermediate Petri net passed to LoLA). The filename should end with `XXXXXX' which is replaced at runtime with a random string.\n"
  string
  typestr="FILENAME"
  default="/tmp/wendy-XXXXXX"
  optional
  hidden

option "noClean" -
  "Do not delete temporary files."
  details="Any temporary files created by Wendy is kept after Wendy terminates.\n"
  flag off
  hidden
