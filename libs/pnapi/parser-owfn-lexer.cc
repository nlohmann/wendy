#line 2 "parser-owfn-lexer.cc"

#line 4 "parser-owfn-lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer OwfnFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *Owfnalloc (yy_size_t  );
void *Owfnrealloc (void *,yy_size_t  );
void Owfnfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include "FlexLexer.h"

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int pnapi::parser::owfn::yy::Lexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 58
#define YY_END_OF_BUFFER 59
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[830] =
    {   0,
        0,    0,    5,    5,    0,    0,   59,   55,   56,   56,
       47,   55,   48,   49,   52,   55,   53,   50,   51,   42,
       45,   41,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,    3,   57,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    3,    4,   19,   18,   18,   19,   19,   20,   20,
       20,   19,   19,   20,   20,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,    3,
       20,   55,    2,   54,   53,   44,   46,   43,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   39,   55,   55,
       55,   55,   55,   55,   55,   55,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   55,   38,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   40,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   55,   55,   25,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   28,   55,   55,
       11,   55,   55,    9,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       11,   19,   19,    9,   55,   55,   55,   55,   10,   55,

       55,   15,   55,   55,   55,   55,   55,   55,   12,   29,
       55,   30,   55,   55,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,   19,   19,   19,   19,   10,   19,
       19,   15,   19,   19,   19,   19,   19,   19,   12,   19,
       19,   19,   19,   19,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   16,   55,   55,
       55,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   16,   19,   19,   19,   55,   55,   55,   26,   55,
       55,   55,   55,   55,   55,   55,   55,    7,   27,   55,
       55,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,    7,
       19,   19,   19,   55,   55,   55,   55,   55,   55,   55,
       14,   55,   55,   55,   55,   55,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,   19,
       19,   19,   19,   19,   19,   19,   14,   19,   19,   19,
       19,   19,   55,   55,   33,   55,   55,   55,   13,   55,

       55,   55,   55,   55,   55,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,   19,   19,
       19,   19,   19,   19,   13,   19,   19,   19,   19,   19,
       19,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   17,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   17,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   32,   31,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       55,   55,   55,   55,   55,   22,   55,   55,   55,   55,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       55,   55,   55,   55,   55,   55,   55,   55,   55,    5,
        5,    5,    5,    5,    5,    5,    5,    5,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   55,   55,   55,
       55,   24,   21,   55,   55,   23,    5,    5,    5,    5,
        5,    5,    5,    5,    5,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   55,   55,   55,   55,    8,   55,
        5,    5,    5,    5,    5,    5,   19,   19,   19,   19,

        8,   19,   55,   55,   55,   34,   55,    5,    5,    5,
        5,    5,   19,   19,   19,   19,   19,   55,   55,   55,
        6,    5,    5,    5,    5,   19,   19,   19,    6,   55,
       55,   55,    5,    5,    5,   19,   19,   19,   55,   55,
       55,    5,    5,    5,   19,   19,   19,   55,   55,   55,
        5,    5,    5,   19,   19,   19,   55,   55,   55,    5,
        5,    5,   19,   19,   19,   55,   55,   35,    5,    5,
        5,   19,   19,   19,   55,   55,    5,    5,   19,   19,
       55,   55,    5,    5,   19,   19,   55,   55,    5,    5,
       19,   19,   55,   55,    5,    5,   19,   19,   55,   55,

        5,    5,   19,   19,   55,   55,    5,    5,   19,   19,
       55,   55,    5,    5,   19,   19,   55,   55,    5,    5,
       19,   19,   37,   36,    5,    5,   19,   19,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    4,    5,    1,    1,    1,    6,
        7,    1,    1,    8,    9,    1,    1,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   11,   12,   13,
       14,   15,    1,    1,   16,    1,   17,   18,   19,   20,
       21,   22,   23,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,    1,   36,   37,   38,
        1,    1,    1,    1,   39,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   40,    1,   41,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[42] =
    {   0,
        1,    2,    2,    1,    1,    2,    2,    2,    1,    1,
        2,    2,    1,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4
    } ;

static yyconst flex_int16_t yy_base[835] =
    {   0,
        0,    0,   41,    0,   82,    0, 1152,    0, 1153, 1153,
        0, 1110, 1153, 1153, 1153, 1140, 1139, 1153, 1153,  110,
     1153, 1134,  101, 1119,  111, 1119, 1129, 1116,  102,  107,
     1115,  114, 1111, 1136, 1153,  150,    0,    0,  189, 1099,
        0,    0,    0, 1129, 1128,    0,    0,  125,    0, 1123,
      116, 1108,  121, 1108, 1118, 1105,  115,  135, 1104,  131,
     1100, 1125, 1153, 1115, 1153, 1153, 1114,  131, 1153, 1153,
     1153,  140,  145, 1153, 1153,  155,    0, 1113,  151,  153,
      157,  160,  161,  165,  171,  185,  180,  170,  117, 1121,
     1153,    0, 1153, 1115, 1114, 1153,    0, 1153, 1098, 1104,

      156, 1096, 1093,  186, 1083,  184, 1079,    0, 1084, 1100,
     1084, 1086, 1088, 1092, 1084,  190, 1153,    0,    0, 1100,
     1099,    0,    0,    0, 1083, 1089,  191, 1081, 1078,  197,
     1068,  192, 1064,    0, 1069, 1085, 1069, 1071, 1073, 1077,
     1069,  198,    0, 1081,    0,  217,  223,    0, 1080,    0,
      197,  220,  214,  222,  221,  226,  207,  225,  228, 1079,
      230,  236,  237,  242,  239,  240,  247,  255, 1053,    0,
     1059, 1057, 1057, 1072, 1054, 1052, 1066, 1045, 1060,    0,
     1057, 1052, 1063, 1046, 1060, 1058, 1057, 1058, 1047, 1054,
     1033,    0, 1039, 1037, 1037, 1052, 1034, 1032, 1046, 1025,

     1040,    0, 1037, 1032, 1043, 1026, 1040, 1038, 1037, 1038,
     1027, 1034,  243, 1038,  248,  251,  258,  259,  252,  262,
      264,  263,  265, 1037,  267,  272,  277,  273,  279,  281,
      284,  290,  285,  291,  280,  280,    0, 1031, 1024, 1025,
     1014, 1015,  283, 1018, 1016, 1009, 1023, 1009, 1006, 1007,
        0, 1016, 1005,    0,  287,  285,    0, 1017, 1010, 1011,
     1000, 1001,  292, 1004, 1002,  995, 1009,  995,  992,  993,
        0, 1002,  991,    0,  307,  308, 1008,  309,  313,  310,
      311,  315,  317,  316,  320,  318,  335,  323,  325,  326,
     1007,  339,  333, 1006,  986,  993,  986,  990,    0,  340,

      999,    0,  162,  997,  986,  996,  983,  977,    0,    0,
      992,    0,  977,  984,  973,  980,  973,  977,    0,  343,
      986,    0,  336,  984,  973,  983,  970,  964,    0,    0,
      979,    0,  964,  971,  348,  350,  336,  354,  979,  356,
      358,  978,  357,  362,  364,  369,  372,  373,  977,  976,
      375,  975,  374,  376,  966,  971,  970,  966,  956,  967,
      957,  965,  964,  962,  955,  952,  947,    0,  956,  946,
      940,  950,  955,  954,  950,  940,  951,  941,  949,  948,
      946,  939,  936,  931,    0,  940,  930,  924,  379,  380,
      381,  384,  388,  393,  390,  394,  397,  400,  398,  404,

      405,  942,  406,  408,  409,  936,  937,  930,    0,  925,
      920,  924,  932,  923,  913,  916,  919,    0,    0,  917,
      920,  923,  924,  917,    0,  912,  907,  911,  919,  910,
      900,  903,  906,    0,    0,  904,  907,  412,  410,  414,
      915,  416,  418,  419,  421,  425,  426,  427,  430,  914,
      913,  432,  438,  895,  906,  897,  905,  898,  905,  901,
        0,  888,  884,  901,  425,  888,  884,  895,  886,  894,
      887,  894,  890,    0,  877,  873,  890,  435,  877,  433,
      448,  441,  451,  452,  456,  459,  890,  440,  460,  461,
      465,  467,  864,  870,    0,  878,  877,  868,    0,  867,

      878,  865,  857,  860,  866,  853,  859,    0,  867,  866,
      857,    0,  856,  867,  854,  846,  849,  855,  466,  468,
      867,  469,  473,  470,  866,  471,  472,  475,  476,  483,
      484,  480,  840,  845,  850,  852,  856,  835,  849,  853,
      839,    0,  489,  831,  836,  841,  843,  847,  826,  840,
      844,  830,    0,  496,  490,  493,  506,  499,  502,  508,
      510,  513,  514,  847,  824,  832,  833,  838,  833,  834,
      831,  826,  833,  828,    0,    0,  814,  822,  823,  828,
      823,  824,  821,  816,  823,  818,    0,    0,  516,  517,
      523,  521,  522,  528,  527,  524,  539,  540,  826,  825,

      805,  804,  820,  809,  806,    0,  806,  815,  796,  803,
      796,  795,  811,  800,  797,    0,  797,  806,  787,  794,
      529,  541,  543,  542,  547,  806,  546,  550,  551,  552,
      800,  799,  800,  787,  788,  793,  794,  793,  790,  791,
      790,  791,  778,  779,  784,  785,  784,  781,  557,  558,
      564,  555,  556,  566,  571,  574,  568,  770,  769,  780,
      765,    0,    0,  765,  769,    0,  764,  763,  774,  759,
        0,    0,  759,  763,    0,  577,  578,  580,  581,  775,
      774,  583,  584,  773,  759,  758,  752,  746,    0,  749,
      754,  753,  747,  741,    0,  744,  586,  589,  587,  588,

      762,  590,  759,  758,  734,    0,  740,  755,  754,  730,
        0,  736,  591,  596,  582,  753,  592,  741,  740,  745,
        0,  738,  737,  742,    0,  603,  604,  608,  746,  720,
      719,  731,  717,  716,  728,  606,  612,  616,  724,  723,
      722,  721,  720,  719,  617,  618,  619,  722,  721,  712,
      719,  718,  709,  624,  625,  620,  725,  724,  702,  722,
      721,  699,  621,  627,  622,  718,  717,    0,  716,  715,
        0,  638,  640,  717,  711,  710,  709,  708,  642,  644,
      694,  693,  692,  691,  630,  646,  683,  682,  681,  680,
      626,  650,  699,  698,  697,  696,  652,  653,  688,  687,

      685,  682,  654,  655,  669,  668,  667,  666,  656,  659,
      659,  658,  657,  654,  660,  661,  649,  647,  646,  645,
      662,  663,    0,    0,    0,    0,  665,  525, 1153,  450,
      700,  703,  706,  709
    } ;

static yyconst flex_int16_t yy_def[835] =
    {   0,
      829,    1,  829,    3,  829,    5,  829,  830,  829,  829,
      830,  830,  829,  829,  829,  830,  830,  829,  829,  830,
      829,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  829,  829,  831,  832,  832,  831,   39,
      832,  832,  832,   39,   39,  832,  832,   39,  832,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,  832,  829,  833,  829,  829,  833,  833,  829,  829,
      829,  833,  833,  829,  829,  833,  834,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  829,
      829,  830,  829,  830,  830,  829,  830,  829,  830,  830,

      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  829,   39,  832,   39,
       39,  832,   39,  832,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,  832,  833,  834,  833,  833,  834,  833,  834,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  830,  830,  830,  830,  830,  830,

      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,

      833,  833,  833,  833,  833,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  830,  830,  830,  830,  830,  830,  830,  830,

      830,  830,  830,  830,  830,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,

      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      830,  830,  830,  830,  830,  830,  830,  830,  830,   39,
       39,   39,   39,   39,   39,   39,   39,   39,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  830,  830,  830,
      830,  830,  830,  830,  830,  830,   39,   39,   39,   39,
       39,   39,   39,   39,   39,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  830,  830,  830,  830,  830,  830,
       39,   39,   39,   39,   39,   39,  833,  833,  833,  833,

      833,  833,  830,  830,  830,  830,  830,   39,   39,   39,
       39,   39,  833,  833,  833,  833,  833,  830,  830,  830,
      830,   39,   39,   39,   39,  833,  833,  833,  833,  830,
      830,  830,   39,   39,   39,  833,  833,  833,  830,  830,
      830,   39,   39,   39,  833,  833,  833,  830,  830,  830,
       39,   39,   39,  833,  833,  833,  830,  830,  830,   39,
       39,   39,  833,  833,  833,  830,  830,  830,   39,   39,
       39,  833,  833,  833,  830,  830,   39,   39,  833,  833,
      830,  830,   39,   39,  833,  833,  830,  830,   39,   39,
      833,  833,  830,  830,   39,   39,  833,  833,  830,  830,

       39,   39,  833,  833,  830,  830,   39,   39,  833,  833,
      830,  830,   39,   39,  833,  833,  830,  830,   39,   39,
      833,  833,  830,  830,   39,   39,  833,  833,    0,  829,
      829,  829,  829,  829
    } ;

static yyconst flex_int16_t yy_nxt[1195] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,    8,    8,   25,
        8,    8,   26,    8,    8,   27,   28,   29,   30,    8,
       31,   32,   33,    8,    8,    8,    8,    8,    8,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   36,   36,
       53,   36,   36,   54,   36,   36,   55,   56,   57,   58,
       36,   59,   60,   61,   36,   36,   36,   36,   36,   36,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   64,

       64,   81,   64,   64,   82,   64,   64,   83,   84,   85,
       86,   64,   87,   88,   89,   64,   64,   64,   64,   64,
       64,   90,   91,   96,   97,   99,  102,  100,  107,  114,
      145,  110,  108,  103,  111,  109,  128,  112,  122,  123,
      125,  133,  126,  129,  145,  134,  140,  168,  135,  146,
      115,  119,  119,  145,  147,  119,  119,  119,  145,  136,
      119,  119,  137,  119,  145,  138,  145,  141,  148,  149,
      145,   93,  154,  145,  145,  151,  157,  152,  145,  155,
      153,  362,  171,  145,  145,  166,  156,  172,  363,  119,
      119,  119,  158,  145,  119,  119,  119,  159,  145,  119,

      119,  160,  119,  179,  161,  189,  167,  165,  175,  162,
      145,  201,  163,  211,  176,  164,  180,  193,  177,  197,
      145,  213,  194,  190,  202,  198,  146,  145,  119,  199,
      145,  212,  147,  145,  145,  145,  145,  214,  145,  145,
      215,  145,  222,  145,  223,  216,  217,  218,  219,  145,
      145,  227,  145,  145,  220,  145,  145,  224,  221,  231,
      145,  145,  226,  230,  145,  145,  225,  228,  145,  229,
      233,  145,  145,  232,  279,  145,  145,  145,  145,  276,
      145,  275,  282,  277,  280,  145,  145,  284,  234,  278,
      145,  285,  145,  287,  145,  281,  289,  145,  145,  290,

      286,  283,  291,  145,  145,  288,  292,  295,  296,  294,
      304,  293,  297,  298,  315,  316,  305,  317,  318,  324,
      145,  145,  145,  145,  145,  325,  145,  339,  145,  145,
      145,  145,  341,  145,  335,  336,  145,  340,  145,  145,
      337,  338,  346,  342,  344,  343,  145,  347,  145,  145,
      345,  348,  145,  349,  350,  379,  359,  352,  351,  376,
      353,  145,  380,  145,  354,  360,  391,  145,  377,  145,
      145,  145,  393,  395,  390,  145,  396,  145,  398,  392,
      389,  394,  145,  397,  400,  145,  145,  145,  145,  145,
      399,  403,  145,  145,  145,  439,  440,  145,  405,  401,

      438,  145,  441,  145,  404,  402,  145,  145,  443,  445,
      145,  145,  446,  145,  444,  442,  447,  145,  145,  145,
      448,  145,  145,  145,  451,  145,  481,  145,  449,  145,
      480,  145,  145,  450,  145,  452,  482,  486,  145,  145,
      145,  453,  483,  145,  485,  145,  145,  503,  484,  487,
       92,  145,  504,  145,  145,  490,  489,  516,  491,  488,
      492,  145,  517,  519,  145,  145,  520,  521,  522,  145,
      526,  524,  145,  145,  145,  523,  528,  525,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  529,  145,  145,
      560,  556,  530,  527,  531,  557,  145,  145,  565,  555,

      558,  559,  566,  145,  554,  561,  145,  577,  567,  145,
      564,  578,  145,  562,  589,  145,  563,  579,  590,  145,
      596,  145,  595,  145,  591,  593,  145,  145,  592,  145,
      145,  599,  594,  598,  145,  145,  145,  145,  145,  624,
      145,  145,  145,  622,  625,  600,  597,  623,  626,  627,
      628,  621,  145,  145,  145,  145,  145,  629,  651,  145,
      145,  649,  630,  145,  145,  145,  655,  652,  145,  145,
      145,  145,  654,  650,  653,  676,  677,  145,  657,  145,
      678,  145,  680,  679,  145,  656,  681,  145,  684,  682,
      145,  145,  683,  145,  145,  145,  145,  145,  699,  145,

      145,  145,  145,  145,  145,  145,  726,  697,  698,  145,
      702,  727,  713,  700,  701,  714,  145,  145,  715,  145,
      728,  145,  717,  729,  716,  145,  738,  736,  737,  145,
      145,  145,  145,  145,  145,  145,  772,  145,  145,  145,
      145,  747,  773,  145,  745,  754,  755,  756,  763,  764,
      746,  145,  765,  145,  779,  145,  780,  145,  774,  145,
      785,  791,  786,  145,  797,  145,  145,  145,  145,  145,
      803,  804,  145,  145,  145,  145,  145,  792,  145,  809,
      810,  826,  825,  824,  815,  823,  820,  816,  798,  819,
      818,  817,  821,  822,  814,  813,  812,  811,  827,  828,

      118,  118,  118,  119,  119,  119,  144,  808,  144,  145,
      807,  145,  806,  805,  802,  801,  800,  799,  796,  795,
      794,  793,  790,  789,  788,  787,  784,  783,  782,  781,
      145,  778,  777,  776,  775,  771,  770,  769,  768,  767,
      766,  762,  761,  760,  759,  758,  757,  753,  752,  751,
      750,  749,  748,  744,  743,  742,  741,  740,  739,  145,
      735,  734,  733,  732,  731,  730,  145,  725,  724,  723,
      722,  721,  720,  719,  718,  145,  712,  711,  710,  709,
      708,  707,  706,  705,  704,  703,  145,  145,  145,  696,
      695,  694,  693,  692,  691,  690,  689,  688,  687,  686,

      685,  675,  674,  673,  672,  671,  670,  669,  668,  667,
      666,  665,  664,  663,  662,  661,  660,  659,  658,  145,
      648,  647,  646,  645,  644,  643,  642,  641,  640,  639,
      638,  637,  636,  635,  634,  633,  632,  631,  145,  145,
      620,  619,  618,  617,  616,  615,  614,  613,  612,  611,
      610,  609,  608,  607,  606,  605,  604,  603,  602,  601,
      145,  588,  587,  586,  585,  584,  583,  582,  581,  580,
      576,  575,  574,  573,  572,  571,  570,  569,  568,  145,
      145,  553,  552,  551,  550,  549,  548,  547,  546,  545,
      544,  543,  542,  541,  540,  539,  538,  537,  536,  535,

      534,  533,  532,  145,  518,  515,  514,  513,  512,  511,
      510,  509,  508,  507,  506,  505,  502,  501,  500,  499,
      498,  497,  496,  495,  494,  493,  145,  145,  145,  479,
      478,  477,  476,  475,  474,  473,  472,  471,  470,  469,
      468,  467,  466,  465,  464,  463,  462,  461,  460,  459,
      458,  457,  456,  455,  454,  145,  437,  436,  435,  434,
      433,  432,  431,  430,  429,  428,  427,  426,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,
      413,  412,  411,  410,  409,  408,  407,  406,  145,  145,
      145,  145,  145,  388,  387,  386,  385,  384,  383,  382,

      381,  378,  375,  374,  373,  372,  371,  370,  369,  368,
      367,  366,  365,  364,  361,  358,  357,  356,  355,  145,
      145,  145,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  323,  322,  321,  320,  319,  314,  313,  312,  311,
      310,  309,  308,  307,  306,  303,  302,  301,  300,  299,
      145,  145,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  265,  264,  263,  262,  261,  260,  259,  258,  257,
      256,  255,  254,  253,  252,  251,  250,  249,  248,  247,
      246,  245,  244,  243,  242,  241,  240,  239,  238,  237,
      236,  235,  145,  145,  145,  210,  209,  208,  207,  206,

      205,  204,  203,  200,  196,  195,  192,  191,  121,  120,
      188,  187,  186,  185,  184,  183,  182,  181,  178,  174,
      173,  170,  169,   95,   94,  117,  150,  145,  145,  143,
      142,  139,  132,  131,  130,  127,  124,  121,  120,   93,
      117,  116,  113,  106,  105,  104,  101,   98,   95,   94,
       93,  829,    7,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829

    } ;

static yyconst flex_int16_t yy_chk[1195] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   20,   20,   23,   25,   23,   29,   32,
       89,   30,   29,   25,   30,   29,   53,   30,   48,   48,
       51,   57,   51,   53,   68,   57,   60,   89,   57,   72,
       32,   36,   36,   72,   73,   36,   36,   36,   73,   58,
       36,   36,   58,   36,   79,   58,   80,   60,   76,   76,
       81,   68,   81,   82,   83,   79,   83,   79,   84,   81,
       80,  303,  101,   88,   85,   88,   82,  101,  303,   36,
       39,   39,   84,   87,   39,   39,   39,   85,   86,   39,

       39,   85,   39,  106,   85,  116,   88,   87,  104,   86,
      151,  132,   86,  142,  104,   86,  106,  127,  104,  130,
      157,  151,  127,  116,  132,  130,  146,  153,   39,  130,
      146,  142,  147,  152,  155,  154,  147,  152,  158,  156,
      153,  159,  157,  161,  158,  153,  154,  155,  156,  162,
      163,  162,  165,  166,  156,  164,  213,  158,  156,  166,
      167,  215,  161,  165,  216,  219,  159,  163,  168,  164,
      168,  217,  218,  167,  218,  220,  222,  221,  223,  215,
      225,  213,  221,  216,  219,  226,  228,  223,  168,  217,
      227,  225,  229,  227,  230,  220,  229,  231,  233,  230,

      226,  222,  231,  232,  234,  228,  232,  235,  235,  234,
      243,  233,  236,  236,  255,  255,  243,  256,  256,  263,
      275,  276,  278,  280,  281,  263,  279,  278,  282,  284,
      283,  286,  280,  285,  275,  275,  288,  279,  289,  290,
      276,  276,  284,  281,  283,  282,  293,  285,  287,  337,
      283,  286,  292,  287,  288,  323,  300,  290,  289,  320,
      292,  335,  323,  336,  293,  300,  337,  338,  320,  340,
      343,  341,  340,  341,  336,  344,  343,  345,  344,  338,
      335,  340,  346,  343,  346,  347,  348,  353,  351,  354,
      345,  351,  389,  390,  391,  390,  391,  392,  354,  347,

      389,  393,  392,  395,  353,  348,  394,  396,  394,  396,
      397,  399,  397,  398,  395,  393,  398,  400,  401,  403,
      399,  404,  405,  439,  403,  438,  439,  440,  400,  442,
      438,  443,  444,  401,  445,  404,  440,  445,  446,  447,
      448,  405,  442,  449,  444,  452,  480,  465,  443,  446,
      830,  453,  465,  488,  482,  449,  448,  478,  452,  447,
      453,  481,  478,  480,  483,  484,  481,  482,  483,  485,
      488,  485,  486,  489,  490,  484,  490,  486,  491,  519,
      492,  520,  522,  524,  526,  527,  523,  491,  528,  529,
      527,  522,  491,  489,  492,  523,  530,  531,  532,  520,

      524,  526,  532,  555,  519,  528,  556,  543,  532,  554,
      531,  543,  558,  529,  554,  559,  530,  543,  554,  557,
      559,  560,  558,  561,  554,  556,  562,  563,  555,  589,
      590,  562,  557,  561,  592,  593,  591,  596,  828,  592,
      595,  594,  621,  590,  593,  563,  560,  591,  594,  595,
      596,  589,  597,  598,  622,  624,  623,  597,  623,  627,
      625,  621,  598,  628,  629,  630,  628,  624,  652,  653,
      649,  650,  627,  622,  625,  649,  650,  651,  630,  654,
      651,  657,  653,  652,  655,  629,  654,  656,  657,  655,
      676,  677,  656,  678,  679,  715,  682,  683,  678,  697,

      699,  700,  698,  702,  713,  717,  713,  676,  677,  714,
      683,  714,  697,  679,  682,  698,  726,  727,  699,  736,
      715,  728,  702,  717,  700,  737,  728,  726,  727,  738,
      745,  746,  747,  756,  763,  765,  763,  754,  755,  791,
      764,  738,  764,  785,  736,  745,  746,  747,  754,  755,
      737,  772,  756,  773,  772,  779,  773,  780,  765,  786,
      779,  785,  780,  792,  791,  797,  798,  803,  804,  809,
      797,  798,  810,  815,  816,  821,  822,  786,  827,  803,
      804,  820,  819,  818,  809,  817,  814,  810,  792,  813,
      812,  811,  815,  816,  808,  807,  806,  805,  821,  822,

      831,  831,  831,  832,  832,  832,  833,  802,  833,  834,
      801,  834,  800,  799,  796,  795,  794,  793,  790,  789,
      788,  787,  784,  783,  782,  781,  778,  777,  776,  775,
      774,  770,  769,  767,  766,  762,  761,  760,  759,  758,
      757,  753,  752,  751,  750,  749,  748,  744,  743,  742,
      741,  740,  739,  735,  734,  733,  732,  731,  730,  729,
      724,  723,  722,  720,  719,  718,  716,  712,  710,  709,
      708,  707,  705,  704,  703,  701,  696,  694,  693,  692,
      691,  690,  688,  687,  686,  685,  684,  681,  680,  674,
      673,  670,  669,  668,  667,  665,  664,  661,  660,  659,

      658,  648,  647,  646,  645,  644,  643,  642,  641,  640,
      639,  638,  637,  636,  635,  634,  633,  632,  631,  626,
      620,  619,  618,  617,  615,  614,  613,  612,  611,  610,
      609,  608,  607,  605,  604,  603,  602,  601,  600,  599,
      586,  585,  584,  583,  582,  581,  580,  579,  578,  577,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  565,
      564,  552,  551,  550,  549,  548,  547,  546,  545,  544,
      541,  540,  539,  538,  537,  536,  535,  534,  533,  525,
      521,  518,  517,  516,  515,  514,  513,  511,  510,  509,
      507,  506,  505,  504,  503,  502,  501,  500,  498,  497,

      496,  494,  493,  487,  479,  477,  476,  475,  473,  472,
      471,  470,  469,  468,  467,  466,  464,  463,  462,  460,
      459,  458,  457,  456,  455,  454,  451,  450,  441,  437,
      436,  433,  432,  431,  430,  429,  428,  427,  426,  424,
      423,  422,  421,  420,  417,  416,  415,  414,  413,  412,
      411,  410,  408,  407,  406,  402,  388,  387,  386,  384,
      383,  382,  381,  380,  379,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  352,  350,
      349,  342,  339,  334,  333,  331,  328,  327,  326,  325,

      324,  321,  318,  317,  316,  315,  314,  313,  311,  308,
      307,  306,  305,  304,  301,  298,  297,  296,  295,  294,
      291,  277,  273,  272,  270,  269,  268,  267,  266,  265,
      264,  262,  261,  260,  259,  258,  253,  252,  250,  249,
      248,  247,  246,  245,  244,  242,  241,  240,  239,  238,
      224,  214,  212,  211,  210,  209,  208,  207,  206,  205,
      204,  203,  201,  200,  199,  198,  197,  196,  195,  194,
      193,  191,  190,  189,  188,  187,  186,  185,  184,  183,
      182,  181,  179,  178,  177,  176,  175,  174,  173,  172,
      171,  169,  160,  149,  144,  141,  140,  139,  138,  137,

      136,  135,  133,  131,  129,  128,  126,  125,  121,  120,
      115,  114,  113,  112,  111,  110,  109,  107,  105,  103,
      102,  100,   99,   95,   94,   90,   78,   67,   64,   62,
       61,   59,   56,   55,   54,   52,   50,   45,   44,   40,
       34,   33,   31,   28,   27,   26,   24,   22,   17,   16,
       12,    7,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[59] =
    {   0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parser-owfn-lexer.ll"
// -*- C++ -*-
/***************************************************************************** 
* flex options 
****************************************************************************/
/* create a c++ lexer */
/* we provide out own class */
/* we need to prefix its base class */
/* created lexer should be called "lex.yy.c" to make the ylwrap script work */
/* we read only one file */
/* yyunput not needed (fix compiler warning) */
/* maintain line number for error reporting */
/* get rid of isatty */
/***************************************************************************** 
* C declarations 
****************************************************************************/
#line 35 "parser-owfn-lexer.ll"

#include "config.h"

#include "formula.h"
#include "parser-owfn-wrapper.h"

#include <iostream>

/* tokens are defined in a struct in a class */
typedef pnapi::parser::owfn::yy::BisonParser::token tt;

/*****************************************************************************
* regular expressions 
****************************************************************************/
/* a start condition to skip comments */

/* 
 * The state "IDENT2" is used for transition identifier.
 * Unlike place identifier these can contain the char "=",
 */

#line 1018 "parser-owfn-lexer.cc"

#define INITIAL 0
#define COMMENT 1
#define IDENT2 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 62 "parser-owfn-lexer.ll"


 /* control comments */ 
#line 1129 "parser-owfn-lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 830 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 829 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 65 "parser-owfn-lexer.ll"
{ return tt::LCONTROL; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 66 "parser-owfn-lexer.ll"
{ return tt::RCONTROL; }
	YY_BREAK
/* comments */
case 3:
YY_RULE_SETUP
#line 69 "parser-owfn-lexer.ll"
{ BEGIN(COMMENT); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 70 "parser-owfn-lexer.ll"
{ BEGIN(INITIAL); }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 71 "parser-owfn-lexer.ll"
{ /* skip */ }
	YY_BREAK
/* control keywords */
case 6:
YY_RULE_SETUP
#line 74 "parser-owfn-lexer.ll"
{ return tt::KEY_MAX_UNIQUE_EVENTS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 75 "parser-owfn-lexer.ll"
{ return tt::KEY_ON_LOOP; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "parser-owfn-lexer.ll"
{ return tt::KEY_MAX_OCCURRENCES; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "parser-owfn-lexer.ll"
{ return tt::KEY_TRUE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 78 "parser-owfn-lexer.ll"
{ return tt::KEY_FALSE; }
	YY_BREAK
/* keywords */
case 11:
YY_RULE_SETUP
#line 81 "parser-owfn-lexer.ll"
{ return tt::KEY_SAFE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 82 "parser-owfn-lexer.ll"
{ return tt::KEY_PLACE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 83 "parser-owfn-lexer.ll"
{ return tt::KEY_INTERFACE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 84 "parser-owfn-lexer.ll"
{ return tt::KEY_INTERNAL; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 85 "parser-owfn-lexer.ll"
{ return tt::KEY_INPUT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 86 "parser-owfn-lexer.ll"
{ return tt::KEY_OUTPUT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 88 "parser-owfn-lexer.ll"
{ BEGIN(IDENT2); return tt::KEY_TRANSITION; }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 89 "parser-owfn-lexer.ll"
{ /* skip whitespaces */ }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 90 "parser-owfn-lexer.ll"
{ BEGIN(INITIAL); yylval->yt_str = strdup(yytext); return tt::IDENT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 91 "parser-owfn-lexer.ll"
{ LexerError("Unexpected symbol at transition identifier"); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 93 "parser-owfn-lexer.ll"
{ return tt::KEY_INITIALMARKING; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 94 "parser-owfn-lexer.ll"
{ return tt::KEY_FINALMARKING; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 95 "parser-owfn-lexer.ll"
{ return tt::KEY_NOFINALMARKING; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 96 "parser-owfn-lexer.ll"
{ return tt::KEY_FINALCONDITION; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 97 "parser-owfn-lexer.ll"
{ return tt::KEY_COST; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 98 "parser-owfn-lexer.ll"
{ return tt::KEY_CONSUME; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 99 "parser-owfn-lexer.ll"
{ return tt::KEY_PRODUCE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 100 "parser-owfn-lexer.ll"
{ return tt::KEY_PORT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 101 "parser-owfn-lexer.ll"
{ return tt::KEY_PORTS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 102 "parser-owfn-lexer.ll"
{ return tt::KEY_ROLES; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 103 "parser-owfn-lexer.ll"
{ return tt::KEY_SYNCHRONOUS; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 104 "parser-owfn-lexer.ll"
{ return tt::KEY_SYNCHRONIZE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 105 "parser-owfn-lexer.ll"
{ return tt::KEY_CONSTRAIN; }
	YY_BREAK
/* keywords for final conditions */
case 34:
YY_RULE_SETUP
#line 108 "parser-owfn-lexer.ll"
{ return tt::KEY_ALL_PLACES_EMPTY; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 109 "parser-owfn-lexer.ll"
{ return tt::KEY_ALL_OTHER_PLACES_EMPTY; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 110 "parser-owfn-lexer.ll"
{ return tt::KEY_ALL_OTHER_INTERNAL_PLACES_EMPTY; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 111 "parser-owfn-lexer.ll"
{ return tt::KEY_ALL_OTHER_EXTERNAL_PLACES_EMPTY; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 112 "parser-owfn-lexer.ll"
{ return tt::OP_AND; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 113 "parser-owfn-lexer.ll"
{ return tt::OP_OR; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 114 "parser-owfn-lexer.ll"
{ return tt::OP_NOT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 115 "parser-owfn-lexer.ll"
{ return tt::OP_GT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 116 "parser-owfn-lexer.ll"
{ return tt::OP_LT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 117 "parser-owfn-lexer.ll"
{ return tt::OP_GE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 118 "parser-owfn-lexer.ll"
{ return tt::OP_LE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 119 "parser-owfn-lexer.ll"
{ return tt::OP_EQ; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 120 "parser-owfn-lexer.ll"
{ return tt::OP_NE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 121 "parser-owfn-lexer.ll"
{ return tt::OP_NE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 122 "parser-owfn-lexer.ll"
{ return tt::LPAR; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 123 "parser-owfn-lexer.ll"
{ return tt::RPAR; }
	YY_BREAK
/* other characters */
case 50:
YY_RULE_SETUP
#line 126 "parser-owfn-lexer.ll"
{ return tt::COLON; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 127 "parser-owfn-lexer.ll"
{ return tt::SEMICOLON; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 128 "parser-owfn-lexer.ll"
{ return tt::COMMA; }
	YY_BREAK
/* identifiers */
case 53:
YY_RULE_SETUP
#line 131 "parser-owfn-lexer.ll"
{ yylval->yt_int = atoi(yytext); return tt::NUMBER; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 132 "parser-owfn-lexer.ll"
{ yylval->yt_int = atoi(yytext); return tt::NEGATIVE_NUMBER; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 133 "parser-owfn-lexer.ll"
{ yylval->yt_str = strdup(yytext); return tt::IDENT; }
	YY_BREAK
/* whitespace */
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 136 "parser-owfn-lexer.ll"
{ /* skip */ }
	YY_BREAK
/* anything else */
case 57:
YY_RULE_SETUP
#line 139 "parser-owfn-lexer.ll"
{ LexerError("unexpected lexical token"); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 141 "parser-owfn-lexer.ll"
ECHO;
	YY_BREAK
#line 1519 "parser-owfn-lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(IDENT2):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Owfnfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Owfnfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Owfnrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Owfnrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 830 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 830 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 829);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Owfnalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Owfnalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Owfnfree((void *) b->yy_ch_buf  );

	Owfnfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)Owfnalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Owfnrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Owfnalloc(new_size  );

		else
			(yy_start_stack) = (int *) Owfnrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Owfnalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *Owfnrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void Owfnfree (void * ptr )
{
	free( (char *) ptr );	/* see Owfnrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 141 "parser-owfn-lexer.ll"




